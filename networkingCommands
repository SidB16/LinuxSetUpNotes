Source: https://haydenjames.io/linux-networking-commands-scripts/
Handy Review Docs: http://www.tcpipguide.com/free/t_toc.htm (&& 4482 repo, which is private :*()

*********************************************************************************
getent servies --> to see ports/services being used on system
In my opinion, grep is still more powerful :P.
*********************************************************************************

*********************************************************************************
Read and Write traffic over a network using netcat
netcat -l 1234 (in listen mode, remeber any port under 1024 are privilaged!)

Open terminal on another linux machine, then type"
net IP.of.listening.machine 1234

Once connection is established, text can sent from one terminal to another.
Used to text connectivity b/w systems- create TCP and UDP connections and investigate them. 
Especially useful in scripts dealing with TCP or UDP sockets, and can be used to send files over a network.  

*********************************************************************************
When or if you dont have net-utils installed, try the follwing:

*********************************************************************************
ip -r n s (To translate MACs to IPs you need to do ARP requests (ICMPv6 if you need
IPv6 addresses.)

Run "tcpdump -nvi any udp port 53 or tcp port 53 or udp port 5353".
Run "ip -r m l eth0" alongside with it.
Watch the result.

*********************************************************************************
curl https://wtfismyip.com/text
*********************************************************************************
Open souce VPN
Implement Virtual Private Network 
Point-to-Point
Site-to-Site
Custom security protcol- SSL/TLS for key exachange
Can traverse NAT and firewalls
Contains many security controls and features.

Eg: Connection ec2 install on AWS
Step1: from my machine (server)
wget https://git.io/vpn -O openvnp.install.sh
sudo bash openvpn-install.sh
<configure options>
Step2: Since aws server is NAT'ed we provide aws server's public address.
cat client.ovpn ==> info about the setup vpn

Step2: on client machine (past client.ovpn)
install openvpn ==> sudo apt-get install openvpn  
past config into file in client ==> vi client.ovpn
<paste contents of server client.ovpn file>
sudo openvpn --config client.ovpn ==> look for INITIAZATION SEQUENCE COMPLTTED

put into bg and then ping google to test internetconnectivity
test to check connect by testing server that you have clients IP==> curl https://wtfismyip.com/text
should be aws server's public ip! 
In essence, packets going over ubuntu aws client routed over NAT over internet to server, all over OPENvpn, all in 5 mins. 


*********************************************************************************
sudo ifconfig enp0s3 198.168.0.190 (CHNAGE IP)
sudo ifconfig enp0s3 198.168.0.190 netmask 255.255.255.0
ip ==> ifconfig is in the process of being deprecated.&& displays peer adddresses and some more features than ifconfig
sudo ip addr add 192.168.0.191/32 dev(name of device) enp0s3 (interface)
ip a
loopback
arp
iwconfig (for wireless interface)
iwconfig wlan0 essid foobar
iw (for WIRELESS interface, only suppoutrs netlink standard!)
iw link
iw scan ==> san for ssid
iw connect "someSSID"
iwlist
iwlist eth1 scan ==> similar usign ifconfig
sudo route del default gw 198.0.0.0
sudo route add default gw 198.0.0.0
ping google.com ==> destination unsreachble
sudo ip route del defualt via 192.0.0.0
sudo ip routa add default via 192.0.0.0
sudo route add 192.0.0.0 reject ==> protect againt DoS attack
sudo ifdown enp0s3 ==> bring (DHCP, in this case) interface down
sudo ifup enp0s3 ==> bring IF up (but wait...)
sudo ifconfig enp0s3 192.168.0.195 netmask 255.255.255.0 up (use to change IP)
sudo ifdown  (will not work since we used Ifconfig to bring it up)
sudo ifconfig enp0s3 down (to bring it down)
sudo ifup enp0s3 (back to default address)
which files or network connections are open via process ==> lsof -i (everything listening on a port)
lsof will you show open files on the system
 TRACEROUTE==> discoverall gatways along path between you and IP adress.!!
 UDP probe packet wit small TTL counter and listens to time exceeded packet from GW, along path
 *** ==> no reponse of GW bc didnt send repond bc packets sent by them had too SHORT TTLS!
 
traceroute -n -q 1 ==> send one packet insetad of 1
tcpdump ==> description of contents of packets going through our network interface. 
sudo tcpdump <exp> <filter>
sudo tdcpdump -i enp0s3 not port 22
sudo tcpdump -i enp0s3 src 192.0.0.0
sudo tcpdump -i enp0s3  dst 192.0.0.0
nmap localhost ==> shows all open hosts
nmap -a ==> more info && useful
nmap -sP 198.192.9.9
sudo ss ==> dumps sockets statistics
ping ==> round bw you and another server
ping6 ==> ipv6 ping
nc ==> net cap==> tcp udp or unique sockets ==>  open close and scan ports. 
nc ==> send files and images from one machine to another. CAN bind through any port!
sudo apt-get install netcat-traditional.
sudo update-altenatives --config nc
netcat -zv localhost 1-100


Files on Linux about networking:
sudo cat /etc/nsswitch.conf ;where applications will get DNS record from 
cat /etc/resolv.conf ==> dns resolver
ls /etc/network
dmsg
dont forget NETWORK MANAGER.









This list of Linux Networking commands and scripts:

arpwatch – Ethernet Activity Monitor.
bmon – bandwidth monitor and rate estimator.
bwm-ng – live network bandwidth monitor.
curl – transferring data with URLs. (or try httpie)
darkstat – captures network traffic, usage statistics.
dhclient – Dynamic Host Configuration Protocol Client
dig – query DNS servers for information.
dstat – replacement for vmstat, iostat, mpstat, netstat and ifstat.
ethtool – utility for controlling network drivers and hardware.
gated – gateway routing daemon.
host – DNS lookup utility.
hping – TCP/IP packet assembler/analyzer.
ibmonitor – shows bandwidth and total data transferred.
ifstat –  report network interfaces bandwidth.
iftop – display bandwidth usage.
ip (PDF file) – a command with more features that ifconfig (net-tools).****************** eg: ip route. 
iperf3 – network bandwidth measurement tool. (above screenshot Stacklinux VPS)
iproute2 – collection of utilities for controlling TCP/IP.
iptables – take control of network traffic.
IPTraf – An IP Network Monitor.
iputils – set of small useful utilities for Linux networking.
iw – a new nl80211 based CLI configuration utility for wireless devices.
jwhois (whois) – client for the whois service.
“lsof -i” – reveal information about your network sockets.
mtr – network diagnostic tool.
net-tools – utilities include: arp, hostname, ifconfig, netstat, rarp, route, plipconfig, slattach, mii-tool, iptunnel and ipmaddr.
ncat – improved re-implementation of the venerable netcat.
netcat – networking utility for reading/writing network connections.
nethogs – a small ‘net top’ tool.
Netperf – Network bandwidth Testing.
netsniff-ng – Swiss army knife for daily Linux network plumbing.
netstat – Print network connections, routing tables, statistics, etc.
netwatch – monitoring Network Connections.
ngrep – grep applied to the network layer.
nload – display network usage.
nmap – network discovery and security auditing.
nmcli – a command-line tool for controlling NetworkManager and reporting network status.
nmtui – provides a text interface to configure networking by controlling NetworkManager.
nslookup – query Internet name servers interactively.
ping – send icmp echo_request to network hosts.
route – show / manipulate the IP routing table.
slurm – network load monitor.
snort – Network Intrusion Detection and Prevention System.
smokeping –  keeps track of your network latency.
socat – establishes two bidirectional byte streams and transfers data between them.
speedometer – Measure and display the rate of data across a network.
speedtest-cli – test internet bandwidth using speedtest.net
ss – utility to investigate sockets.
ssh –  secure system administration and file transfers over insecure networks.
tcpdump – command-line packet analyzer.
tcptrack – Displays information about tcp connections on a network interface.
telnet – user interface to the TELNET protocol.
tracepath – very similar function to traceroute.
traceroute – print the route packets trace to network host.
vnStat – network traffic monitor.
websocat – Connection forwarder from/to web sockets to/from usual sockets, in style of socat.
wget –  retrieving files using HTTP, HTTPS, FTP and FTPS.
Wireless Tools for Linux – includes iwconfig, iwlist, iwspy, iwpriv and ifrename.
Wireshark – network protocol analyzer.
