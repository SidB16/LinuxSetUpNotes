Key Concept for databases:
https://www.geeksforgeeks.org/difference-between-structured-semi-structured-and-unstructured-data/

Big Data includes huge volume, high velocity, and extensible variety of data. These are 3 types: Structured data, Semi-structured data, and Unstructured data.

    Structured data –
    Structured data is data whose elements are addressable for effective analysis. 
    It has been organized into a formatted repository that is typically a database. 
    It concerns all data which can be stored in database SQL in a table with rows and columns. 
    They have relational keys and can easily be mapped into pre-designed fields. 
    Today, those data are most processed in the development and simplest way to manage information. Example: Relational data.
    
    Semi-Structured data –
    Semi-structured data is information that does not reside in a relational database but 
    that have some organizational properties that make it easier to analyze.
    With some process, you can store them in the relation database 
    (it could be very hard for some kind of semi-structured data), but Semi-structured exist to ease space. 
    Example: XML data.
    
    Unstructured data –
    Unstructured data is a data that is which is not organized in a pre-defined manner or 
    does not have a pre-defined data model, thus it is not a good fit for a mainstream relational database. 
    So for Unstructured data, there are alternative platforms for 
    storing and managing, it is increasingly prevalent in 
    IT systems and is used by organizations in a variety of 
    business intelligence and analytics applications. 
    Example: Word, PDF, Text, Media logs
    

Resrouces:
For a proper installation guide see Dajango-Deployment-Guide file

https://www.leeboonstra.com/Django/setup-a-django-project-with-a-mysql-database/?fbclid=IwAR1vSS-dcJTDlzV6lUjBjWwZ1eQE8parxwI0zrpTfR3kgDzWQnnJSnoHpgk

https://www.inmotionhosting.com/support/website/how-to-create-a-database-using-mysql-from-the-command-line/

A)Prerequisites:
sudo apt-get update
sudo apt-get install python3-pip python3-dev mysql-server libmysqlclient-dev
sudo pip3 install virtualenv
(reboot for changes to apply)

B)
1) Login as root.
sudo mysql -u root -p 

2) Once mysql cli is active,

CREATE DATABASE mydatabase;
CREATE USER 'sid16'@'localhost' IDENTIFIED BY 'p';
GRANT ALL PRIVILEGES ON mydatabase.* TO 'sid16'@'localhost';
FLUSH PRIVILEGES;

3) Test
show grants for 'sid16'@'localhost';

4) Exit mysql cli through "\q"

C)
virtualenv myproject
pip3 install django mysqlclient (FOR the virtual environment created)
pip3 install djangorestframework channels
source myproject/bin/activate
django-admin startproject mysite

Configure Databse setting in mysites/mysites/setting.py
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'myproject',
        'USER': 'myprojectuser',
        'PASSWORD': 'password',
        'HOST': 'localhost',
        'PORT': '',
    }
}

python manage.py makemigrations 
python manage.py migrate

python manage.py createsuperuser

python manage.py runserver 0.0.0.0:8000

Append /admin to the end of the URL and you should be able to access the login screen to the admin interface.

(Resource for last 3 lines: https://www.digitalocean.com/community/tutorials/how-to-use-mysql-or-mariadb-with-your-django-application-on-ubuntu-14-04)
