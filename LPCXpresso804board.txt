Getting Started:
0) God Resource: https://www.bogotobogo.com/Embedded/memory_mapped_io_vs_port_mapped_isolated_io.php


MCUXpresso & Linux
1)https://community.nxp.com/community/mcuxpresso/mcuxpresso-sdk/blog/2019/04/20/tutorial-mcuxpresso-sdk-with-linux-part-2-commandline-debugging-with-gdb

GBD
https://mcuoneclipse.com/2015/03/25/command-line-programming-and-debugging-with-gdb/

2) 
https://github.com/mbedmicro/pyOCD/blob/master/udev/README.md

3) Webinars
https://www.nxp.com/pages/lpc80x-series-introduction-part-iii-get-started-fast-with-this-comprehensive-enablement-offering-for-lpc800-mcus:TIP-LPC80X-COMPREHENSIVE-ENABLEMENT

https://www.nxp.com/pages/part-ii-creative-ways-to-leverage-the-lpc804-mcus-integrated-programmable-logic-feature:TIP-LPC80X-LEVERAGE-PLU-PT2

4) Community Docs
https://community.nxp.com/docs/DOC-343497

5) LPC Open Library
https://www.nxp.com/design/microcontrollers-developer-resources/lpcopen-libraries-and-examples:LPC-OPEN-LIBRARIES?&tid=vanLPCOPEN


6) CMSIS-DAP Protocol
CMSIS-DAP provides a standardized way to access the Coresight Debug Access Port (DAP) of an ARM Cortex microcontroller via USB.
https://os.mbed.com/handbook/CMSIS-DAP

Different types of commands can be issued by the host:
General Commands: request information and control the debug unit. Also used to connect/disconnect the debug unit.
Common SWD/JTAG commands: used for instance to set the clock speed
SWD specific commands: configure the parameters for SWD mode
JTAG specific commands: configure the JTAG device chain
Transfer Commands: read/write CoreSight registers. These commands are independent of the transport (SWD or JTAG)


7) C/C++ Library Suppourt in MCUXpresso IDE
Redlib Our own (non-GNU) ISO C90 standard C library, with some C99 extensions.

Newlib GNU C/C++ library

NewlibNano a version of the GNU C/C++ library optimized for embedded.

By default, MCUXpresso IDE will use Redlib for C projects, NewlibNano for SDK C++ projects, and Newlib for C++ projects for preinstalled MCUs.

Newlib provides complete C99 and C++ library support at the expense of a larger (in some cases, much larger) code size in your application.

NewlibNano was produced as part of ARM’s “GNU Tools for ARM Embedded Processors” initiative in order to provide a version of Newlib focused on code size. Using NewlibNano can help dramatically reduce the size of your application compared to using the standard version of Newlib – for both C and C++ projects.

If you need a smaller application size and don’t need the additional functionality of the C99 or C++ libraries, we recommend the use of Redlib, which can often produce much smaller applications.

7.1) Library Variants:
Each C library family is provided in a number of different variants : None, Nohost and Nohost-nf, Semihost and Semihost-nf (Redlib only). These variants each provide a different set of ‘stubs’ that form the very bottom of the C library and include certain low-level functions used by other functions in the library


7.2) What is Semihosting?
Semihosting is a term to describe application IO via the debug probe. For this to operate, library code and debug support are required.

Traditionally, this might be done by piping the messages over a serial cable connected to a Terminal program running on your PC. MCUXpresso IDE offers an alternative to this scheme, called semihosting. Semihosting provides a mechanism for code running on the target board to use the facilities of the PC running the IDE. The most common example of this is for the strings passed to a printf being displayed in the IDE’s console view.

7.3) Important Notes Regarding Semi Hosting 
Semihosting operations cause the CPU to drop into “debug state”, which means that for the duration of the data transfer between the target and the host PC no code (including interrupts) will get executed on the target. Thus if your application uses interrupts, then it is normally advisable to avoid the use of semihosting whilst interrupts are active – and certainly within interrupt handlers themselves. If you still need to use printf, then you can retarget the bottom level of the C library to use an alternative communication channel, such as a UART or the Cortex-M CPU’s ITM channel.

7.4) Switching the selected C library

Normally the library variant used by a project is set up when the project is first created by the New Project Wizard. However it is quite simple to switch the selected C library between Redlib, Newlib and NewlibNano, as well as switching the library variant in use.

To switch, highlight the project in the Project Explorer view and go to:

Quickstart -> Quick Settings -> Set library/header type

and select the required library and variant.

Manually Switching

Alternatively, you can make the required changes to your project properties manually as follows...

When switching between Newlib(Nano) and Redlib libraries you must also switch the headers (since the 2 libraries use different header files). To do this:

Select the project in Project Explorer

Right-click and select Properties

Expand C/C++ Build and select Settings

In the Tools settings tab, select Miscellaneous under MCU C Compiler. Note: Redlib is not available for C++ projects

In Library headers, select Newlib or Redlib

In the Tools setting tab, select Architecture & Headers under MCU Assembler

In Library headers, select Newlib or Redlib

Repeat the above sequence for all Build Configurations (typically Debug and Release).

To then change the libraries actually being linked with (assuming you are using Managed linker scripts):

Select the project in Project Explorer

Right-click and select Properties

Expand C/C++ Build and select Settings

In the Tools settings tab, select Managed Linker Script under MCU Linker

In the Library drop-down, select the Newlib, NewlibNano or Redlib library variant that you require (None, Nohost, Semihost, Semihost-nf).

Again repeat the above sequence for all Build Configurations (typically Debug and Release). Note: Redlib is not available for C++ projects.


7.5)
The MCUXpresso Config Tools set is a suite of evaluation and configuration tools that help you from initial evaluation to production software development. Following tools are included:

Pins Tool- Enables you to configure the pins of a device. Pins tool enables you to create, inspect, change, and modify any aspect of the pin configuration and muxing of the device.

Clocks Tool- Enables you to configure initialization of the system clock (core, system, bus, and peripheral clocks) and generates the C code with clock initialization functions and configuration structures.

Peripherals Tool- Enable you to configure the intilization for the MCUXpresso SDK drivers.

Device Configuration- Enables you to generate a Device Configuration Data (DCD) image using the format and constrains specified in the Boot ROM reference manual.

TEE Tool- Enables you to configure security policies of memory areas, bus masters, and peripherals, in order to isolate and safeguard sensitive areas of your application.

8) AHB peripherals vs APB peripherals
Source: http://www.differencebetween.net/technology/difference-between-ahb-and-apb/
When talking of the difference between the two, the AHB uses a full duplex parallel communication whereas the APB uses massive memory-I/O accesses.

Both the AHB and the APB are on chip Bus standards. The Advanced High-performance Bus is capable of waits, errors and bursts. The ADH, which is pipelined, mainly connects to memories.


