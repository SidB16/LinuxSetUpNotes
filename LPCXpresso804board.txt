Getting Started:
MCUXpresso & Linux
1)https://community.nxp.com/community/mcuxpresso/mcuxpresso-sdk/blog/2019/04/20/tutorial-mcuxpresso-sdk-with-linux-part-2-commandline-debugging-with-gdb

GBD
https://mcuoneclipse.com/2015/03/25/command-line-programming-and-debugging-with-gdb/

2) 
https://github.com/mbedmicro/pyOCD/blob/master/udev/README.md

3) Webinars
https://www.nxp.com/pages/lpc80x-series-introduction-part-iii-get-started-fast-with-this-comprehensive-enablement-offering-for-lpc800-mcus:TIP-LPC80X-COMPREHENSIVE-ENABLEMENT

https://www.nxp.com/pages/part-ii-creative-ways-to-leverage-the-lpc804-mcus-integrated-programmable-logic-feature:TIP-LPC80X-LEVERAGE-PLU-PT2

4) Community Docs
https://community.nxp.com/docs/DOC-343497

5) LPC Open Library
https://www.nxp.com/design/microcontrollers-developer-resources/lpcopen-libraries-and-examples:LPC-OPEN-LIBRARIES?&tid=vanLPCOPEN


6) CMSIS-DAP Protocol
CMSIS-DAP provides a standardized way to access the Coresight Debug Access Port (DAP) of an ARM Cortex microcontroller via USB.
https://os.mbed.com/handbook/CMSIS-DAP

Different types of commands can be issued by the host:
General Commands: request information and control the debug unit. Also used to connect/disconnect the debug unit.
Common SWD/JTAG commands: used for instance to set the clock speed
SWD specific commands: configure the parameters for SWD mode
JTAG specific commands: configure the JTAG device chain
Transfer Commands: read/write CoreSight registers. These commands are independent of the transport (SWD or JTAG)


7) C/C++ Library Suppourt in MCUXpresso IDE
Redlib Our own (non-GNU) ISO C90 standard C library, with some C99 extensions.

Newlib GNU C/C++ library

NewlibNano a version of the GNU C/C++ library optimized for embedded.

By default, MCUXpresso IDE will use Redlib for C projects, NewlibNano for SDK C++ projects, and Newlib for C++ projects for preinstalled MCUs.

Newlib provides complete C99 and C++ library support at the expense of a larger (in some cases, much larger) code size in your application.

NewlibNano was produced as part of ARM’s “GNU Tools for ARM Embedded Processors” initiative in order to provide a version of Newlib focused on code size. Using NewlibNano can help dramatically reduce the size of your application compared to using the standard version of Newlib – for both C and C++ projects.

If you need a smaller application size and don’t need the additional functionality of the C99 or C++ libraries, we recommend the use of Redlib, which can often produce much smaller applications.
